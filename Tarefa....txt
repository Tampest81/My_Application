public class GPStracker implements LocationListener {
Context context;
// criação da variável e atribuindo valores à ela
public GPStracker(Context c){
context = c;
}
// criação do método GetLocation para retornar a localização
public Location getLocation(){
// verificação se a permissão está ativa, caso esteja desativada, irá printar através do comando Toast, "Não foi permitir"
if(ContextCompat.checkSelfPermission(context, Manifest.permission.ACCESS_FINE_LOCATION) != 
PackageManager.PERMISSION_GRANTED){
// Mostra uma modal na tela "Não foi permitir" caso o usuário não tenha permitido o uso do fine location
Toast.makeText(context, "Não foi permitir", Toast.LENGTH_SHORT).show();
return null;
}
LocationManager lm = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);
boolean isGPSEnabled = lm.isProviderEnabled(LocationManager.GPS_PROVIDER);

//Caso o gps esteja ativado, ele irá retornar a posição recebida atráves do lastknown location, que receberá a ultima posição providenciada
//pelo Location manager gps provider, tudo isso apenas irá funcionar, após o requestLocation fizer a requisição das atualizações da posição
//do usuário

If (isGPSEnabled){
lm.requestLocationUpdates(LocationManager.GPS_PROVIDER, 6000, 10, this);
Location l = lm.getLastKnownLocation(LocationManager.GPS_PROVIDER);
return l;
} else {
// Caso não esteja habilitado irá mostrar na tela, pedindo que o usuário habilite o GPS
Toast.makeText(context, "Por favor, habitar o GPS!", Toast.LENGTH_LONG).show();
}
// recebendo o null para satisfazer todas as opções
return null;
}
// Métodos para o GPStracker funcionar corretamente, ele pede a existência deles, mas não há a necessidade de ter um valor.
@Override
public void onProviderDisabled(@NonNull String provider) {    }
//
@Override
public void onLocationChanged(@NonNull Location location) {    }
//
@Override
public void onStatusChanged(String provider, int status, Bundle extras) {    }
}